package main

import (
	"context"
	"encoding/json"
	"log"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/unrolled/render"
)

// User is a type that defines a user with a name and an age.
type User struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
}

// createUser creates a new user in the Firestore database.
func createUser(ctx context.Context, client *firestore.Client, user User) error {
	// Add the new user to the "users" collection.
	_, err := client.Collection("users").Doc(user.Name).Set(ctx, user)
	if err != nil {
		return err
	}

	return nil
}

func main() {
	// Create a new Firestore client.
	client, err := firestore.NewClient(ctx, projectID)
	if err != nil {
		log.Fatal(err)
	}

	// Create a new Pug renderer.
	r := render.New()

	// Define a handler function for the "/users" URL path.
	http.HandleFunc("/users", func(w http.ResponseWriter, r *http.Request) {
		// Check the request method.
		if r.Method == "POST" {
			// If the method is "POST", decode the request body as a User object.
			var user User
			if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
				// If there was an error decoding the request body, return a "400 Bad Request" response.
				w.WriteHeader(http.StatusBadRequest)
				return
			}

			// Use the createUser function to save the new user in the Firestore database.
			if err := createUser(ctx, client, user); err != nil {
				// If there was an error saving the user, return a "500 Internal Server Error" response.
				w.WriteHeader(http.StatusInternalServerError)
				return
			}

			// Return a "201 Created"
